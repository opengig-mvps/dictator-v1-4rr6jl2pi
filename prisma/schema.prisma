
  generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
  }
  
  datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
  }
        
model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  password        String?
  username        String    @unique
  name            String?
  role            String    @default("player")
  googleAuthToken String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  countrySelections CountrySelection[]
  armies            Army[]
  gdpManagements    GDPManagement[]
  publicSentiments  PublicSentiment[]
  captures          Capture[]
  events            RandomEvent[]
  relationships     DiplomaticRelationship[]

  @@map("users")
}

model CountrySelection {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  country   String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, country])
  @@map("country_selections")
}

model Army {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  airForce    Int      @default(0)
  navy        Int      @default(0)
  ground      Int      @default(0)
  nuclear     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@map("armies")
}

model GDPManagement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  gdp         Float    @default(0)
  industries  Json
  taxRates    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@map("gdp_managements")
}

model PublicSentiment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  sentiment   Float    @default(0)
  rebellion   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@map("public_sentiments")
}

model Capture {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  country     String
  resources   Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@map("captures")
}

model RandomEvent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  eventType   String
  impact      Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@map("random_events")
}

model DiplomaticRelationship {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  country     String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, country])
  @@map("diplomatic_relationships")
}